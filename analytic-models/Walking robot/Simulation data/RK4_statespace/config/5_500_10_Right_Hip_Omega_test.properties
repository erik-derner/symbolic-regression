#======= General experiment parameters
# seed: The initial seed of the whole multi-run experiment. The seed automatically increases by 1.
# Default: 1
# Usage: seed = 5
 seed = 1

# nbOfRuns: The number of runs.
# Default: 1.
# Usage: nbOfRuns = 2
 nbOfRuns = 30

# resultsDir: This is a required parameter. 
# The directory where the generated result files will be stored.
# The specified directory must already exist.
# Usage: resultsDir = results/
 resultsDir = SNGP_models/10_Right_Hip_Omega/30_500_30_5_40/
 
#======= Dataset parameters
# dataset: This is a required parameter. 
# The data set starting with a header
#   - nb. of variables
#   - nb. of data samples
# and the data samples, where each row defines one sample as [x y w], where
#   - x is a vector of independent variables values
#   - y is the target value
#   - w is the weight assigned to this sample
# The weights are optional and are considered only when the parameter weightsType
# is set to 0, see below.
# It can be defined either with relative or absolute path. 
# Usage: dataset = 1dof_441_discounted_direct_epoch1040.txt
 dataset = data/10_Right_Hip_Omega_500.txt

#======= Method selection
# solverName: Name of the solver used to evolve models. 
# Default: SolverMultiThreaded - evolves LASSO models for the task of fitting explicit target values.
# Possible solvers:
#    - SolverMultiThreaded
#    - SolverSimpleLassoPIteration ... solver for the genetic P-iteration task
#    - SolverSimpleLassoVIteration ... solver for the genetic V-iteration task
#    - SolverDirectV
# Usage: solverName = SolverSimpleLassoPIteration
 solverName = SolverMultiThreaded

#======= Regression parameters
# regressionClass: regression class (method)
# Possible regression classes:
#     LassoFitD ... LASSO regression
#     LeastSquaresFit ... Least squares regression
#     LeastSquaresFitWithoutOffset ... Least squares regression with zero offset
#     CombinedFit ... LASSO to find regressors, then least squares
# Default: LassoFitD
# Usage: regressionClass = LeastSquaresFit
 regressionClass = LeastSquaresFit

# maxWeight: Maximum weight to include a feature to the regression model
# Applicable for regression methods LeastSquaresFit and LeastSquaresFitWithoutOffset.
# Default: 1e4
# Usage: maxWeight = 1e8
 

# minWeight: Minimum weight to include a feature to the regression model
# Applicable for regression methods LeastSquaresFit and LeastSquaresFitWithoutOffset.
# Default: 1e-20
# Usage: minWeight = 1e-30
 


#======= General SNGP parameters
# populationSize: The number of all individuals in the population (includes all partitions).
# Default: 300
# Usage: populationSize = 500
 populationSize = 500

# lsIterations: The number of iteration of the local search optimization procedure.
# Default: 100
# Usage: lsIterations = 500
 lsIterations = 50

# maxGenerations: The maximum number of generations available in a single run.
# Default: 50000
# Usage: maxGenerations = 100000
 maxGenerations = 30000

# nbOfThreads: The number of threads run in each epoch.
# Default: 2
# Usage: nbOfThreads = 16

# epochLength: The number of generations carried out in each thread of the epoch.
# Default: 1000
# Usage: epochLength = 1000
 epochLength = 1000

# maxEpochs: The maximum number of epochs.
# Default: 20
# Usage: maxEpochs = 50
 maxEpochs = 30

#======= Number of features (set both values the same)
# nbRegressors: The maximum number of features the final regression model is composed of.
# Default: 10
# Usage: nbRegressors = 10
 nbRegressors = 5

# nbPredictors: The size of the pool of features from which the final regression model can be composed.
# Default: 50
# Usage: nbPredictors = 100
 nbPredictors = 5

#======= Node-related parameters
# depthLimit: The maximum depth of individual expressions.
# Default: 10
# Usage: depthLimit = 5
 depthLimit = 5

# useIdentityNodes: true ... identity nodes, placed at the end of the population, are used as fixed regressors.
#                   false ... identity nodes are not used.
# Default: false
 useIdentityNodes = true
 
# identityNodeType: identity ... standard identity nodes
#                   maxmin ... clipping
# Default: identity


# nbOfTransformedVar: The number of TransformedVar nodes.
#     It specifies the total number of variables, both original and transformed.
#     If set to -1, the number is set to the number of problem variables, which means that only the original variables are used (no transformed variables).
# Default: -1
# Usage: nbOfTransformedVar = 10
 nbOfTransformedVar = 40

# tailFunctionSet: Elementary functions used to create model structure.
# Available non-protected functions: Cosine, Minus, Multiply, Plus, Pow2,
#                     Pow3, Pow4, Pow5, Root3, Sigmoid, Sine, 
#                     GeneralSine, GeneralTanh, GeneralGauss2D, BentIdentity
# Default: Multiply, Plus, Minus, Pow2, GeneralTanh
# Usage: tailFunctionSet = Multiply, Plus, Minus, Pow2, Pow3, Sine 
 tailFunctionSet = Multiply, Plus, Minus, Cosine, Pow2, Pow3, Sine

#======= SolverSimpleLassoPIteration, SolverSimpleLassoVIteration
#   - Solvers for GPI and GVI.
#     In each iteration of GPI or GVI, several trial SNGP runs are carried out, 
#     all of them starting from the same population - the best final population of the previous epoch. 

# desiredOptimum, optMisplacementPenalty: Desired optimum of the sought function and the penalty
# imposed on the solution with wrongly positioned optimum.
# The desiredOptimum value is used only if optMisplacementPenalty is greater then 0.0.
# Default: optMisplacementPenalty = 0.0

# policyRHSInitialization: Specifies the policy and RHS initialization method.
#                       0 ... reward-based, 1 ... random
# Default: 0
# Usage: policyRHSInitialization = 1

# gamma: The value of gamma used for calculating the RHS of the Bellman eq.
# Default: 0.9
# Usage: gamma = 0.999

#======= SNGP extensions
# populationClass: population class (type), defining how the population is divided
# Possible population classes:
#     PartitionedPopulation ... [constants, functions-head, transformed variables, functions-tail, identity nodes]
#     PartitionedPopulationCheckingVariables ... PartitionedPopulation + number of used variables is fixed for every node
#     PartitionedPopulationCheckingDepth ... PartitionedPopulation + depth is fixed for every node
#     PartitionedPopulationCheckingVariablesAndDepth ... PartitionedPopulationCheckingVariables + depth is fixed for every node
# Default: PartitionedPopulation
# Usage: populationClass = PartitionedPopulationCheckingVariables
populationClass = PartitionedPopulation

#======= Parameters for numOfVars & depth extensions (PartitionedPopulationCheckingVariables, PartitionedPopulationCheckingDepth and PartitionedPopulationCheckingVariablesAndDepth)
# cvDistribution: distribution of number of variables/depth in the population
# Possible distributions:
#     Uniform ... all the segments have the same (uniform) length
#     LinearlyIncreasing ... linearly increasing segment size for increasing number of variables/depth: the higher number of variables/depth, the larger the segment
#     LinearlyDecreasing ... linearly decreasing segment size for increasing number of variables/depth: the higher number of variables/depth, the smaller the segment
# Default: Uniform
# Usage: cvDistribution = LinearlyDecreasing


# cvMaxMutationAttempts: Maximal number of mutation trials to keep the number of used variables/depth fulfilled, before the mutation of the node is aborted.
# Default: 20
# Usage: cvMaxMutationAttempts = 50


# cvEnsurePermanentCorrectness: Defines which nodes are tested for meeting the condition of number of used variables/depth when performing mutation.
# Possible options:
#     0 ... only the node being mutated is tested for meeting the number of used variables/depth and therefore, the number of nodes violating the condition of number of used variables/depth may be non-zero throughout the evolution
#     1 ... the node being mutated and all its predecessors are tested, which ensures that all nodes in the population always meet the required number of used variables/depth
# Default: 0
# Usage: cvEnsurePermanentCorrectness = 1


# cvNumNodesEnforcedArity: Number of nodes in the beginning of each segment (sequence of nodes with the same number of variables), for which it is required that the functional arity > 1.
# Default: 20
# Usage: cvNumNodesEnforcedArity = 10


# cvMaxRotatedVarsPerNode: Maximal number of transformed variables (including primitive variables) present in the node.
#     The value has to be smaller than the number of transformed variables in the population.
# Default: numOfVars (number of primitive variables)
# Usage: cvMaxRotatedVarsPerNode = 5


# cvEnableUnrestrictedSegment: Sets whether the last segment is included in the population for which the number of variables is not checked.
# Possible options:
#     0 ... the whole population has a number of variables strictly set
#     1 ... the last segment in the division of the population based on the number of variables is transformed to an unrestricted segment. The last segment is the one with the highest prescribed number of variables.
# Default: 0
# Usage: cvEnableUnrestrictedSegment = 1
